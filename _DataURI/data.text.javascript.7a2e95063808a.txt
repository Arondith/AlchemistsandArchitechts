data:text/javascript;base64,KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzLwogICAgY29uc3Qgbm9vcGZuID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgLy8KICAgIGNvbnN0IFRyYWNrZXIgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBwID0gVHJhY2tlci5wcm90b3R5cGU7CiAgICBwLmdldCA9IG5vb3BmbjsKICAgIHAuc2V0ID0gbm9vcGZuOwogICAgcC5zZW5kID0gbm9vcGZuOwogICAgLy8KICAgIGNvbnN0IHcgPSB3aW5kb3c7CiAgICBjb25zdCBnYU5hbWUgPSB3Lkdvb2dsZUFuYWx5dGljc09iamVjdCB8fCAnZ2EnOwogICAgY29uc3QgZ2FRdWV1ZSA9IHdbZ2FOYW1lXTsKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91QmxvY2tPcmlnaW4vdUFzc2V0cy9wdWxsLzQxMTUKICAgIGNvbnN0IGdhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgICBpZiAoIGxlbiA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTsKICAgICAgICBsZXQgZm47CiAgICAgICAgbGV0IGEgPSBhcmdzW2xlbi0xXTsKICAgICAgICBpZiAoIGEgaW5zdGFuY2VvZiBPYmplY3QgJiYgYS5oaXRDYWxsYmFjayBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewogICAgICAgICAgICBmbiA9IGEuaGl0Q2FsbGJhY2s7CiAgICAgICAgfSBlbHNlIGlmICggYSBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewogICAgICAgICAgICBmbiA9ICggKSA9PiB7IGEoZ2EuY3JlYXRlKCkpOyB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGFyZ3MuaW5kZXhPZignaGl0Q2FsbGJhY2snKTsKICAgICAgICAgICAgaWYgKCBwb3MgIT09IC0xICYmIGFyZ3NbcG9zKzFdIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgICAgICBmbiA9IGFyZ3NbcG9zKzFdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICggZm4gaW5zdGFuY2VvZiBGdW5jdGlvbiA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZuKCk7CiAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICB9CiAgICB9OwogICAgZ2EuY3JlYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBUcmFja2VyKCk7CiAgICB9OwogICAgZ2EuZ2V0QnlOYW1lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBUcmFja2VyKCk7CiAgICB9OwogICAgZ2EuZ2V0QWxsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIFtuZXcgVHJhY2tlcigpXTsKICAgIH07CiAgICBnYS5yZW1vdmUgPSBub29wZm47CiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdUJsb2NrT3JpZ2luL3VBc3NldHMvaXNzdWVzLzIxMDcKICAgIGdhLmxvYWRlZCA9IHRydWU7CiAgICB3W2dhTmFtZV0gPSBnYTsKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3JoaWxsL3VCbG9jay9pc3N1ZXMvMzA3NQogICAgY29uc3QgZGwgPSB3LmRhdGFMYXllcjsKICAgIGlmICggZGwgaW5zdGFuY2VvZiBPYmplY3QgKSB7CiAgICAgICAgaWYgKCBkbC5oaWRlIGluc3RhbmNlb2YgT2JqZWN0ICYmIHR5cGVvZiBkbC5oaWRlLmVuZCA9PT0gJ2Z1bmN0aW9uJyApIHsKICAgICAgICAgICAgZGwuaGlkZS5lbmQoKTsKICAgICAgICAgICAgZGwuaGlkZS5lbmQgPSAoKT0+e307CiAgICAgICAgfQogICAgICAgIGlmICggdHlwZW9mIGRsLnB1c2ggPT09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIGNvbnN0IGRvQ2FsbGJhY2sgPSBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICBpZiAoIGl0ZW0gaW5zdGFuY2VvZiBPYmplY3QgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGl0ZW0uZXZlbnRDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJyApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGl0ZW0uZXZlbnRDYWxsYmFjaywgMSk7CiAgICAgICAgICAgICAgICBpdGVtLmV2ZW50Q2FsbGJhY2sgPSAoKT0+e307CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGRsLnB1c2ggPSBuZXcgUHJveHkoZGwucHVzaCwgewogICAgICAgICAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICAgICAgICAgIGRvQ2FsbGJhY2soYXJnc1swXSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmICggQXJyYXkuaXNBcnJheShkbCkgKSB7CiAgICAgICAgICAgICAgICBjb25zdCBxID0gZGwuc2xpY2UoKTsKICAgICAgICAgICAgICAgIGZvciAoIGNvbnN0IGl0ZW0gb2YgcSApIHsKICAgICAgICAgICAgICAgICAgICBkb0NhbGxiYWNrKGl0ZW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgLy8gZW1wdHkgZ2EgcXVldWUKICAgIGlmICggZ2FRdWV1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uICYmIEFycmF5LmlzQXJyYXkoZ2FRdWV1ZS5xKSApIHsKICAgICAgICBjb25zdCBxID0gZ2FRdWV1ZS5xLnNsaWNlKCk7CiAgICAgICAgZ2FRdWV1ZS5xLmxlbmd0aCA9IDA7CiAgICAgICAgZm9yICggY29uc3QgZW50cnkgb2YgcSApIHsKICAgICAgICAgICAgZ2EoLi4uZW50cnkpOwogICAgICAgIH0KICAgIH0KfSkoKTsK